# Base sonora
use_bpm 60

# Define una variable para el tiempo de inicio
start_time = Time.now

# Duración total en segundos (3 minutos)
initial_duration = 3 * 60

# Verifica si la duración total ha pasado
define :within_initial do
  Time.now - start_time < initial_duration
end

define :within_finale do
  Time.now - start_time >= initial_duration
end

with_fx :reverb, mix: 0.5, room: 0.8 do
  with_fx :echo, phase: 0.25, decay: 2 do
    # Acorde en Do
    notes = [:c4, :e4, :g4]
    # Duración de cada nota y silencio en segundos
    note_duration = 0.5
    silence_duration = 3
    # Incremento del volumen en cada paso
    volume_increase = 1.0 / notes.length
    
    # Loop para tocar las notas con aumento de volumen
    live_loop :melody_increasing do
      if within_initial
        notes.each_with_index do |note, i|
          play note, amp: (volume_increase * (i + 1))
          sleep note_duration
          sleep silence_duration
        end
      else
        # Tocar el acorde final
        play_chord notes, amp: 1.5, sustain: 3, release: 2
        stop
      end
    end
    
    # Espera 3 minutos antes de empezar los demás elementos
    sleep initial_duration
    
    # Melodía inspirada en Mozart
    live_loop :mozart_melody do
      if within_finale
        use_synth :piano
        
        # Repetir 20 veces con pausas variables
        20.times do
          play_pattern_timed [:e4, :g4, :b4, :e5], [0.5, 0.5, 0.5, 0.5], release: 0.5
          sleep rrand(1, 3)
        end
      else
        stop
      end
    end
    
    # Arpegios inspirados en Chopin
    live_loop :chopin_arpeggios, sync: :mozart_melody do
      if within_finale
        use_synth :pretty_bell
        play_pattern_timed chord(:e3, :m7), 0.25, release: 0.5
        sleep 1
      else
        stop
      end
    end
    
    # Sonidos abstractos y postapocalípticos
    live_loop :abstract_sounds, sync: :mozart_melody do
      if within_finale
        use_synth :saw
        with_fx :distortion, distort: 0.7 do
          play :e2, release: 2, cutoff: rrand(60, 120)
          sleep 2
        end
      else
        stop
      end
    end
  end
end
